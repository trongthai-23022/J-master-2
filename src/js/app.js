// Thay th·∫ø to√†n b·ªô n·ªôi dung file: src/js/app.js

import './notifications.js';
import './gemini.js';
import './logging.js';
import './error.js';
import './manager.js';
import './match-game.js';
import './cloze-story.js';
import './settings.js';
import './storage-warning.js';
import './lang.js';
import './theme.js';
import './encrypt.js';
import { analyzeWordWithAI } from './ai-sensei.js';

// --- C√ÅC H√ÄM TI·ªÜN √çCH CHO MODAL (GLOBAL) ---
window.showModal = (modalId) => document.getElementById(modalId)?.classList.remove('hidden');
window.hideModals = () => {
    document.querySelectorAll('.fixed.inset-0').forEach(modal => modal.classList.add('hidden'));
};

// --- H√ÄM C·∫¨P NH·∫¨T GIAO DI·ªÜN ---
function updateStats() {
    if (!window.getStats) return;
    const stats = window.getStats();
    const vocabCountEl = document.getElementById('stat-vocab');
    const listCountEl = document.getElementById('stat-list');
    if (vocabCountEl) vocabCountEl.textContent = stats.vocabCount || 0;
    if (listCountEl) listCountEl.textContent = stats.listCount || 0;
}

function renderVocabLists() {
    const lists = window.getWordLists ? window.getWordLists() : {};
    const container = document.getElementById('vocab-lists-area');
    if (!container) return;
    container.innerHTML = '';
    if (Object.keys(lists).length === 0) {
        container.innerHTML = '<p class="text-gray-500">Ch∆∞a c√≥ b·ªô t·ª´ n√†o. H√£y t·∫°o m·ªôt b·ªô m·ªõi!</p>';
        return;
    }
    for (const listName in lists) {
        const listContainer = document.createElement('div');
        listContainer.className = 'bg-gray-50 p-4 rounded-lg mb-4 shadow-sm';
        const words = lists[listName] || [];

        const headerRow = `
            <div class="hidden md:grid grid-cols-4 gap-4 text-xs font-semibold text-gray-500 border-b pb-2 mb-2">
                <div>Kanji</div>
                <div>C√°ch ƒë·ªçc</div>
                <div>√ù nghƒ©a</div>
                <div class="text-right">Thao t√°c</div>
            </div>`;

        const wordsHTML = words.map(word => `
            <div class="word-item grid grid-cols-3 md:grid-cols-4 items-center gap-4 border-b md:border-t-0 py-2">
                <div class="font-semibold col-span-2 md:col-span-1">
                    <strong class="jp-font">${word.kanji || ''}</strong>
                    <div class="block md:hidden text-xs text-gray-700 mt-1">${word.reading || ''}</div>
                </div>
                <div class="hidden md:block text-sm text-gray-700">${word.reading || ''}</div>
                <div class="text-sm text-gray-700 col-span-1">${word.meaning || ''}</div>
                <div class="flex gap-2 justify-self-end col-span-3 md:col-span-1 mt-2 md:mt-0">
                    <button class="ai-sensei-btn text-xs bg-purple-100 hover:bg-purple-200 text-purple-700 py-1 px-2 rounded" data-word='${JSON.stringify(word)}' title="AI-Sensei Ph√¢n T√≠ch">ü§ñ</button>
                    <button class="edit-word-btn text-xs bg-blue-100 hover:bg-blue-200 text-blue-700 py-1 px-2 rounded" data-list-name="${listName}" data-word-id="${word.id}">S·ª≠a</button>
                    <button class="delete-word-btn text-xs bg-red-100 hover:bg-red-200 text-red-700 py-1 px-2 rounded" data-list-name="${listName}" data-word-id="${word.id}">X√≥a</button>
                </div>
            </div>`).join('');

        listContainer.innerHTML = `
            <div class="flex justify-between items-center mb-2 flex-wrap gap-2">
                <h3 class="text-lg font-bold text-gray-800">${listName} (${words.length} t·ª´)</h3>
                <div class="flex gap-2 flex-wrap">
                    <button class="cloze-story-btn text-xs bg-purple-100 hover:bg-purple-200 text-purple-700 py-1 px-2 rounded" data-list-name="${listName}">T·∫°o truy·ªán</button>
                    <button class="add-word-btn text-xs bg-green-100 hover:bg-green-200 text-green-700 py-1 px-2 rounded" data-list-name="${listName}">Th√™m t·ª´</button>
                    <button class="delete-list-btn text-xs bg-red-100 hover:bg-red-200 text-red-700 py-1 px-2 rounded" data-list-name="${listName}">X√≥a b·ªô</button>
                </div>
            </div>
            ${headerRow}
            <div class="space-y-1">${wordsHTML || '<p class="text-xs text-center p-2 text-gray-400">B·ªô t·ª´ n√†y tr·ªëng.</p>'}</div>`;
        container.appendChild(listContainer);
    }
}

// --- H√ÄM X·ª¨ L√ù L∆ØU T·ª™ V·ª∞NG ---
function handleSaveWord() {
    const id = document.getElementById('word-id-input').value;
    const listName = document.getElementById('word-list-name-input').value;
    const word = {
        id: id ? parseInt(id) : Date.now(),
        kanji: document.getElementById('kanji-input').value.trim(),
        reading: document.getElementById('reading-input').value.trim(),
        meaning: document.getElementById('meaning-input').value.trim(),
    };
    if (!word.kanji || !word.meaning) {
        window.showToast("Vui l√≤ng nh·∫≠p T·ª´ v·ª±ng v√† √ù nghƒ©a.", 'error');
        return;
    }
    if (id) { window.editWord(listName, parseInt(id), word); }
    else { window.addWord(listName, word); }
    hideModals();
    renderVocabLists();
    updateStats();
    window.showToast(id ? 'ƒê√£ c·∫≠p nh·∫≠t t·ª´!' : 'ƒê√£ th√™m t·ª´ m·ªõi!', 'success');
    window.logEvent && window.logEvent('save_word', { list: listName, word: word.kanji });
}

// --- C√ÅC H√ÄM X·ª¨ L√ù C√ÄI ƒê·∫∂T ---
function openSettingsModal() {
    const currentLang = window.getLang();
    const currentTheme = window.getTheme();
    const currentApiKey = window.getApiKey();
    const currentWarning = window.getStorageWarning();
    const currentSpeechLang = window.getSpeechLang();

    document.getElementById('settings-lang').value = currentLang;
    document.getElementById('settings-theme').value = currentTheme;
    document.getElementById('api-key-input').value = currentApiKey;
    document.getElementById('settings-storage-warning').checked = currentWarning;
    document.getElementById('settings-speech-lang').value = currentSpeechLang;

    showModal('modal-settings');
}

function handleSaveSettings() {
    const newLang = document.getElementById('settings-lang').value;
    const newTheme = document.getElementById('settings-theme').value;
    const newApiKey = document.getElementById('api-key-input').value;
    const newWarning = document.getElementById('settings-storage-warning').checked;
    const newSpeechLang = document.getElementById('settings-speech-lang').value;

    window.saveLang(newLang);
    window.saveTheme(newTheme);
    window.saveApiKey(newApiKey);
    window.saveStorageWarning(newWarning);
    window.saveSpeechLang(newSpeechLang);

    hideModals();
    window.showToast('ƒê√£ l∆∞u c√†i ƒë·∫∑t!', 'success');
    window.logEvent && window.logEvent('save_settings');
}

// --- KH·ªûI T·∫†O APP V√Ä G·∫ÆN S·ª∞ KI·ªÜN ---
function initApp() {
    if (window.checkStorageWarning) window.checkStorageWarning();
    if (window.setLangUI) window.setLangUI(window.getLang ? window.getLang() : 'vi');
    if (window.setTheme) window.setTheme(window.getTheme ? window.getTheme() : 'light');

    renderVocabLists();
    updateStats();

    // --- G·∫ÆN C√ÅC S·ª∞ KI·ªÜN CH√çNH ---
    
    // N√∫t "Th√™m Danh S√°ch"
    document.getElementById('btn-add-list')?.addEventListener('click', () => {
        const input = document.getElementById('new-list-name-input');
        const errorEl = document.getElementById('add-list-error');
        if (input) input.value = '';
        if (errorEl) errorEl.textContent = '';
        showModal('add-list-modal');
        input?.focus();
    });

    document.getElementById('save-new-list-btn')?.addEventListener('click', () => {
        const input = document.getElementById('new-list-name-input');
        const errorEl = document.getElementById('add-list-error');
        const name = input.value.trim();
        if (!name) {
            if (errorEl) errorEl.textContent = 'T√™n b·ªô t·ª´ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.';
            return;
        }
        const currentLists = window.getWordLists() || {};
        if (currentLists[name]) {
            if (errorEl) errorEl.textContent = 'T√™n n√†y ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n kh√°c.';
            return;
        }
        window.saveWordLists({ ...currentLists, [name]: [] });
        hideModals();
        renderVocabLists();
        updateStats();
        window.showToast('ƒê√£ t·∫°o b·ªô t·ª´ m·ªõi!', 'success');
        window.logEvent && window.logEvent('add_list', { list: name });
    });
    
    // --- X·ª≠ l√Ω Import/Export (LOGIC M·ªöI) ---
    const importFileInput = document.getElementById('import-file-input');
    const importModal = document.getElementById('modal-import');

    // M·ªü modal khi nh·∫•n n√∫t "Import"
    document.getElementById('btn-import').addEventListener('click', () => {
        if (importModal) {
            importModal.querySelector('#import-json-textarea').value = '';
            showModal('modal-import');
        }
    });

    // X·ª≠ l√Ω khi nh·∫•n n√∫t "B·∫Øt ƒë·∫ßu nh·∫≠p" trong modal
    document.getElementById('confirm-import-btn')?.addEventListener('click', async () => {
        const textarea = document.getElementById('import-json-textarea');
        const jsonContent = textarea.value;

        if (!jsonContent.trim()) {
            window.showToast('Vui l√≤ng d√°n n·ªôi dung JSON v√†o √¥.', 'error');
            return;
        }

        const result = await window.importWordLists(jsonContent);
        window.showToast(result.message, result.success ? 'success' : 'error');
        
        if (result.success) {
            hideModals();
            renderVocabLists();
            updateStats();
        }
    });

    // X·ª≠ l√Ω sao ch√©p m·∫´u JSON
    document.getElementById('copy-json-sample-btn')?.addEventListener('click', () => {
        const codeEl = document.getElementById('json-sample-code');
        if (navigator.clipboard && codeEl) {
            navigator.clipboard.writeText(codeEl.innerText.trim())
                .then(() => {
                    window.showToast('ƒê√£ sao ch√©p JSON m·∫´u!', 'success');
                })
                .catch(() => {
                    window.showToast('Kh√¥ng th·ªÉ sao ch√©p.', 'error');
                });
        }
    });

    // N√∫t "Export" kh√¥ng ƒë·ªïi
    document.getElementById('btn-export').addEventListener('click', () => {
        window.exportWordLists();
        window.showToast('ƒê√£ b·∫Øt ƒë·∫ßu t·∫£i xu·ªëng file backup.', 'info');
    });

    // S·ª± ki·ªán ch·ªçn file v·∫´n gi·ªØ l·∫°i ƒë·ªÉ c√≥ th·ªÉ d√πng trong t∆∞∆°ng lai
    importFileInput.addEventListener('change', async (event) => { 
        // ... code kh√¥ng ƒë·ªïi ...
    });
    
    // N√∫t "L∆∞u" trong modal th√™m/s·ª≠a t·ª´
    document.getElementById('save-word-btn').addEventListener('click', handleSaveWord);

    // X·ª≠ l√Ω modal x√°c nh·∫≠n x√≥a
    const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
    if (confirmDeleteBtn) {
        confirmDeleteBtn.addEventListener('click', () => {
            const action = confirmDeleteBtn.dataset.action;
            const listName = confirmDeleteBtn.dataset.listName;
            const wordId = confirmDeleteBtn.dataset.wordId;

            if (action === 'delete-list') {
                window.deleteList(listName);
                window.showToast(`ƒê√£ x√≥a b·ªô t·ª´ "${listName}"!`, 'success');
            } else if (action === 'delete-word') {
                window.deleteWord(listName, parseInt(wordId));
                window.showToast('ƒê√£ x√≥a t·ª´ th√†nh c√¥ng!', 'success');
            }

            hideModals();
            renderVocabLists();
            updateStats();
            delete confirmDeleteBtn.dataset.action;
            delete confirmDeleteBtn.dataset.listName;
            delete confirmDeleteBtn.dataset.wordId;
        });
    }

    // Event Delegation cho c√°c n√∫t trong danh s√°ch
    document.getElementById('vocab-lists-area').addEventListener('click', e => {
        const addBtn = e.target.closest('.add-word-btn');
        const editBtn = e.target.closest('.edit-word-btn');
        const deleteWordBtn = e.target.closest('.delete-word-btn');
        const deleteListBtn = e.target.closest('.delete-list-btn');
        const clozeStoryBtn = e.target.closest('.cloze-story-btn');
        const aiSenseiBtn = e.target.closest('.ai-sensei-btn');

        if (addBtn) {
            const listName = addBtn.dataset.listName;
            document.getElementById('word-modal-title').textContent = `Th√™m t·ª´ v√†o b·ªô "${listName}"`;
            document.getElementById('word-id-input').value = '';
            document.getElementById('word-list-name-input').value = listName;
            document.getElementById('kanji-input').value = '';
            document.getElementById('reading-input').value = '';
            document.getElementById('meaning-input').value = '';
            showModal('add-edit-word-modal');
        } else if (editBtn) {
            const listName = editBtn.dataset.listName;
            const wordId = parseInt(editBtn.dataset.wordId);
            const word = window.getWordLists()[listName].find(w => w.id === wordId);
            if (word) {
                document.getElementById('word-modal-title').textContent = 'S·ª≠a t·ª´';
                document.getElementById('word-id-input').value = word.id;
                document.getElementById('word-list-name-input').value = listName;
                document.getElementById('kanji-input').value = word.kanji;
                document.getElementById('reading-input').value = word.reading;
                document.getElementById('meaning-input').value = word.meaning;
                showModal('add-edit-word-modal');
            }
        } else if (deleteWordBtn) {
            const listName = deleteWordBtn.dataset.listName;
            const wordId = deleteWordBtn.dataset.wordId;
            const confirmBtn = document.getElementById('confirm-delete-btn');
            if (confirmBtn) {
                confirmBtn.dataset.action = 'delete-word';
                confirmBtn.dataset.listName = listName;
                confirmBtn.dataset.wordId = wordId;
            }
            document.getElementById('confirm-delete-title').textContent = 'X√°c nh·∫≠n x√≥a t·ª´';
            document.getElementById('confirm-delete-message').textContent = 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·ª´ n√†y kh√¥ng?';
            showModal('confirm-delete-modal');
        } else if (deleteListBtn) {
            const listName = deleteListBtn.dataset.listName;
            const confirmBtn = document.getElementById('confirm-delete-btn');
            if (confirmBtn) {
                confirmBtn.dataset.action = 'delete-list';
                confirmBtn.dataset.listName = listName;
            }
            document.getElementById('confirm-delete-title').textContent = 'X√°c nh·∫≠n x√≥a b·ªô t·ª´';
            document.getElementById('confirm-delete-message').textContent = `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a TO√ÄN B·ªò b·ªô t·ª´ "${listName}" kh√¥ng?`;
            showModal('confirm-delete-modal');
        } else if (clozeStoryBtn) {
            const listName = clozeStoryBtn.dataset.listName;
            const lists = window.getWordLists();
            const wordList = lists[listName];

            if (!window.getApiKey()) {
                window.showToast('Vui l√≤ng nh·∫≠p kh√≥a API Gemini trong C√†i ƒë·∫∑t.', 'error');
                return;
            }
            if (!wordList || wordList.length < 3) {
                window.showToast('C·∫ßn √≠t nh·∫•t 3 t·ª´ v·ª±ng trong b·ªô n√†y ƒë·ªÉ t·∫°o truy·ªán.', 'error');
                return;
            }
            const shuffled = window.shuffle ? window.shuffle([...wordList]) : [...wordList];
            const wordsForStory = shuffled.slice(0, Math.min(5, wordList.length));
            window.createClozeStory(wordsForStory);
        } else if (aiSenseiBtn) {
            try {
                const wordData = JSON.parse(aiSenseiBtn.dataset.word);
                analyzeWordWithAI(wordData);
            } catch (error) {
                console.error("L·ªói ƒë·ªçc d·ªØ li·ªáu t·ª´ v·ª±ng:", error);
                window.showToast('Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu c·ªßa t·ª´ n√†y.', 'error');
            }
        }
    });

    // C√°c n√∫t H·ªßy (cancel) tr√™n c√°c modal
    document.querySelectorAll('.btn-cancel').forEach(btn => {
        btn.addEventListener('click', hideModals);
    });
    
    // S·ª± ki·ªán cho c√°c n√∫t trong Header
    document.getElementById('btn-settings').addEventListener('click', openSettingsModal);
    
    // S·ª± ki·ªán cho n√∫t L∆∞u trong Modal C√†i ƒë·∫∑t
    document.getElementById('btn-settings-save').addEventListener('click', handleSaveSettings);

    // G·∫ÆN S·ª∞ KI·ªÜN CHO C√ÅC N√öT MINI-GAME
    function launchGame(gameType) {
        const lists = window.getWordLists ? window.getWordLists() : {};
        const select = document.getElementById('game-list-select');
        const selectedName = select ? select.value : (Object.keys(lists)[0] || '');
        if (!selectedName || !lists[selectedName] || lists[selectedName].length === 0) {
            window.showToast('Vui l√≤ng ch·ªçn m·ªôt b·ªô t·ª´ c√≥ d·ªØ li·ªáu ƒë·ªÉ ch∆°i.', 'error');
            return;
        }
        const wordList = lists[selectedName];
        sessionStorage.setItem('jMasterGameType', gameType);
        sessionStorage.setItem('jMasterWordList', JSON.stringify(wordList));
        window.location.href = 'src/game.html';
    }

    document.getElementById('btn-flashcard')?.addEventListener('click', () => launchGame('flashcard'));
    document.getElementById('btn-quiz')?.addEventListener('click', () => launchGame('quiz'));
    document.getElementById('btn-writing')?.addEventListener('click', () => launchGame('writing'));
    document.getElementById('btn-match')?.addEventListener('click', () => launchGame('match-game'));
}

// X·ª≠ l√Ω l·ªói to√†n c·ª•c
window.onerror = function(msg, url, line, col, error) {
    if (window.showError) showError(`L·ªói: ${msg} (${url}:${line})`);
    if (window.logEvent) window.logEvent('error', {msg, url, line, col, error});
    return true;
};

// Kh·ªüi ch·∫°y ·ª©ng d·ª•ng khi trang ƒë√£ t·∫£i xong
document.addEventListener('DOMContentLoaded', initApp);